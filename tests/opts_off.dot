digraph {
	graph [compound=true,
		fontname="Helvetica,Arial,sans-serif",
		overlap=prism,
		splines=true
	];
	node [color="#ffffff",
		fillcolor="#ffffff",
		fontname="Helvetica,Arial,sans-serif",
		shape=box,
		style="rounded, filled"
	];
	subgraph cluster_greeting_flow {
		graph [color="#96b0af",
			label=GREETING_FLOW,
			style="rounded, filled"
		];
		"('greeting_flow', 'node1')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE1</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('greeting_flow', 'node1'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr><tr><td port="(('greeting_flow', 'node1'), ('greeting_flow', 'node2'), 0)">cnd.regexp(r"how are you")</td></tr></table>>];
		"('greeting_flow', 'node2')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE2</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('greeting_flow', 'node2'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr><tr><td port="(('greeting_flow', 'node2'), ('greeting_flow', 'node3'), 0)">cnd.regexp(r"talk about")</td></tr><tr><td port="(('greeting_flow', 'node2'), ('music_flow', 'node1'), 0)">cnd.regexp(r"talk about music")</td></tr><tr><td port="(('greeting_flow', 'node2'), ('NONE',), 0)">cnd.regexp(r"previous", re.IGNORECASE)</td></tr></table>>];
		"('greeting_flow', 'node3')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE3</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('greeting_flow', 'node3'), ('greeting_flow', 'node4'), 0)">cnd.regexp(r"bye")</td></tr></table>>];
		"('greeting_flow', 'node4')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE4</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('greeting_flow', 'node4'), ('greeting_flow', 'node1'), 0)">cnd.regexp(r"hi|hello", re.IGNORECASE)</td></tr><tr><td port="(('greeting_flow', 'node4'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr></table>>];
	}
	subgraph cluster_music_flow {
		graph [color="#c6ae82",
			label=MUSIC_FLOW,
			style="rounded, filled"
		];
		"('music_flow', 'node1')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE1</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('music_flow', 'node1'), ('music_flow', 'node2'), 0)">cnd.regexp(r"yes|yep|ok", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node1'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr></table>>];
		"('music_flow', 'node2')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE2</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('music_flow', 'node2'), ('music_flow', 'node3'), 0)">cnd.regexp(r"next", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node2'), ('music_flow', 'node2'), 0)">cnd.regexp(r"repeat", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node2'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr></table>>];
		"('music_flow', 'node3')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE3</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('music_flow', 'node3'), ('music_flow', 'node4'), 0)">cnd.regexp(r"next", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node3'), ('music_flow', 'node2'), 0)">cnd.regexp(r"back", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node3'), ('music_flow', 'node3'), 0)">cnd.regexp(r"repeat", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node3'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr></table>>];
		"('music_flow', 'node4')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>NODE4</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('music_flow', 'node4'), ('NONE',), 0)">cnd.regexp(r"next", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node4'), ('NONE',), 1)">cnd.regexp(r"next time", re.IGNORECASE)</td></tr><tr><td port="(('music_flow', 'node4'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr></table>>];
	}
	subgraph cluster_global_flow {
		graph [color="#ff7b9c",
			label=GLOBAL_FLOW,
			style="rounded, filled"
		];
		"('global_flow', 'fallback_node')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>FALLBACK_NODE</b></td></tr></table>>];
		"('global_flow', 'start_node')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>START_NODE</b></td></tr><tr><td><b>Transitions</b></td></tr><tr><td port="(('global_flow', 'start_node'), ('music_flow', 'node1'), 0)">cnd.regexp(r"talk about music")</td></tr><tr><td port="(('global_flow', 'start_node'), ('greeting_flow', 'node1'), 0)">cnd.regexp(r"hi|hello", re.IGNORECASE)</td></tr><tr><td port="(('global_flow', 'start_node'), ('global_flow', 'fallback_node'), 0)">cnd.true()</td></tr></table>>];
	}
	subgraph cluster_virtual {
		graph [color="#d289ab",
			label=VIRTUAL,
			style="rounded, filled"
		];
		"('virtual', 'NONE')"	[label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4"><tr><td><b>UNRESOLVED</b></td></tr></table>>];
	}
	"('greeting_flow', 'node1')":"(('greeting_flow', 'node1'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('greeting_flow', 'node1')":"(('greeting_flow', 'node1'), ('greeting_flow', 'node2'), 0)" -> "('greeting_flow', 'node2')";
	"('global_flow', 'fallback_node')":"(('global_flow', 'fallback_node'), ('greeting_flow', 'node1'), 0)" -> "('greeting_flow', 'node1')";
	"('global_flow', 'fallback_node')":"(('global_flow', 'fallback_node'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('global_flow', 'fallback_node')":"(('global_flow', 'fallback_node'), ('music_flow', 'node1'), 0)" -> "('music_flow', 'node1')";
	"('global_flow', 'fallback_node')":"(('global_flow', 'fallback_node'), ('NONE',), 0)" -> "('virtual', 'NONE')";
	"('greeting_flow', 'node2')":"(('greeting_flow', 'node2'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('greeting_flow', 'node2')":"(('greeting_flow', 'node2'), ('music_flow', 'node1'), 0)" -> "('music_flow', 'node1')";
	"('greeting_flow', 'node2')":"(('greeting_flow', 'node2'), ('NONE',), 0)" -> "('virtual', 'NONE')";
	"('greeting_flow', 'node2')":"(('greeting_flow', 'node2'), ('greeting_flow', 'node3'), 0)" -> "('greeting_flow', 'node3')"	[minlen=1];
	"('music_flow', 'node1')":"(('music_flow', 'node1'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('music_flow', 'node1')":"(('music_flow', 'node1'), ('music_flow', 'node2'), 0)" -> "('music_flow', 'node2')";
	"('music_flow', 'node2')":"(('music_flow', 'node2'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('music_flow', 'node2')":"(('music_flow', 'node2'), ('music_flow', 'node2'), 0)" -> "('music_flow', 'node2')";
	"('music_flow', 'node2')":"(('music_flow', 'node2'), ('music_flow', 'node3'), 0)" -> "('music_flow', 'node3')";
	"('global_flow', 'start_node')":"(('global_flow', 'start_node'), ('greeting_flow', 'node1'), 0)" -> "('greeting_flow', 'node1')";
	"('global_flow', 'start_node')":"(('global_flow', 'start_node'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('global_flow', 'start_node')":"(('global_flow', 'start_node'), ('music_flow', 'node1'), 0)" -> "('music_flow', 'node1')";
	"('greeting_flow', 'node3')":"(('greeting_flow', 'node3'), ('greeting_flow', 'node4'), 0)" -> "('greeting_flow', 'node4')";
	"('greeting_flow', 'node4')":"(('greeting_flow', 'node4'), ('greeting_flow', 'node1'), 0)" -> "('greeting_flow', 'node1')";
	"('greeting_flow', 'node4')":"(('greeting_flow', 'node4'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('music_flow', 'node3')":"(('music_flow', 'node3'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('music_flow', 'node3')":"(('music_flow', 'node3'), ('music_flow', 'node2'), 0)" -> "('music_flow', 'node2')";
	"('music_flow', 'node3')":"(('music_flow', 'node3'), ('music_flow', 'node3'), 0)" -> "('music_flow', 'node3')";
	"('music_flow', 'node3')":"(('music_flow', 'node3'), ('music_flow', 'node4'), 0)" -> "('music_flow', 'node4')";
	"('music_flow', 'node4')":"(('music_flow', 'node4'), ('global_flow', 'fallback_node'), 0)" -> "('global_flow', 'fallback_node')";
	"('music_flow', 'node4')":"(('music_flow', 'node4'), ('NONE',), 0)" -> "('virtual', 'NONE')";
	"('music_flow', 'node4')":"(('music_flow', 'node4'), ('NONE',), 1)" -> "('virtual', 'NONE')";
}
